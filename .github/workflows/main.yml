name: Generate and Publish http-client libs

on:
  push:
    paths:
      - 'API/Api/**'
      - '.github/workflows/main.yml'
    branches:
      - master
  workflow_dispatch: {}

jobs:
  generate-and-publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Build package name
        run: |
          PACKAGE_NAME="@${{ github.repository_owner }}/api-client"
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install Swashbuckle CLI tool
        run: dotnet tool install --global Swashbuckle.AspNetCore.Cli
      
      - name: Add dotnet tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Install Kiota
        uses: microsoft/setup-kiota@v0.5.0

      - name: Install xmllint (for parsing csproj xml to get version)
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Extract version from .csproj
        id: get-project-version
        working-directory: API
        run: |
          VERSION=$(xmllint --xpath "string(//Project/PropertyGroup/Version)" Api/Api.csproj)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Project version: $VERSION"

      - name: Calculate package version from npm
        id: get-npm-version
        run: |
          PACKAGE_NAME="${{ env.PACKAGE_NAME }}"
          echo "Fetching current published version for $PACKAGE_NAME..."

          NPM_VERSION=$(npm view "$PACKAGE_NAME" version 2>/dev/null || echo "")
          PROJECT_VERSION="${{ env.VERSION }}"

          if [ -z "$NPM_VERSION" ]; then
            echo "No version found in npm. Using project version: $PROJECT_VERSION"
            echo "FULL_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV
            exit 0
          fi

          echo "Found published version in npm: $NPM_VERSION"
          echo "Local project version: $PROJECT_VERSION"

          # Extract MAJOR.MINOR
          NPM_MM=$(echo "$NPM_VERSION" | cut -d. -f1,2)
          PROJECT_MM=$(echo "$PROJECT_VERSION" | cut -d. -f1,2)

          if [ "$PROJECT_MM" = "$NPM_MM" ]; then
            # Same MAJOR.MINOR → increment PATCH
            NPM_PATCH=$(echo "$NPM_VERSION" | cut -d. -f3)
            NEW_PATCH=$((NPM_PATCH + 1))
            FINAL_VERSION="$PROJECT_MM.$NEW_PATCH"
            echo "Matching MAJOR.MINOR. Incrementing patch: $FINAL_VERSION"
            echo "FULL_VERSION=$FINAL_VERSION" >> $GITHUB_ENV
          elif dpkg --compare-versions "$PROJECT_MM" gt "$NPM_MM"; then
            # Project is ahead → use project version as-is
            echo "Project MAJOR.MINOR > npm. Using project version: $PROJECT_VERSION"
            echo "FULL_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV
          else
            echo "❌ Project version ($PROJECT_VERSION) is behind published npm version ($NPM_VERSION)"
            exit 1
          fi

      - name: Build API project
        working-directory: API
        run: dotnet build Api/Api.csproj --configuration Release

      - name: Generate Swagger file
        working-directory: API
        run: |
          swagger tofile --output swagger.json Api/bin/Release/net8.0/Api.dll v1

      - name: Update kiota clients in the repository
        working-directory: API
        run: kiota generate --language typescript --openapi ./swagger.json --output ./typescript-client --class-name ApiClient
    
      - name: Set version in package.json
        working-directory: API
        run: |
          cd typescript-client
          npm init -y
          npm pkg set name="${{ env.PACKAGE_NAME }}"
          npm pkg set version="${{ env.FULL_VERSION }}"
          npm pkg set repository.type=git
          npm pkg set repository.url=git+https://github.com/${{ github.repository }}.git

          cat package.json

      - name: Configure npm for GitHub Packages
        working-directory: API
        run: |
          cd typescript-client
          echo "@${{ github.repository_owner }}:registry=https://npm.pkg.github.com" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" >> .npmrc
      
      - name: Publish to GitHub npm registry
        working-directory: API
        run: |
          cd typescript-client
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


